package flow;


import java.util.Date;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import beans.CallLogVO;
import beans.TransferVO;

import com.avaya.sce.runtime.SimpleVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.cqgas.tools.util.AppUtil;
import com.cqgas.tools.util.DateUtil;
import com.cqgas.tools.util.TextUtil;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2016年8月29日 下午09时54分01秒
 */
public class GetCallData extends com.avaya.sce.runtime.BasicServlet {
	private static final Logger logs = Logger.getLogger(GetCallData.class);
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016年8月29日 下午09时54分01秒
	 */
	public GetCallData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2016年8月29日 下午09时54分01秒
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		IVariableField uui = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_UUI);
		IVariableField cticallidField = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_CALLID);
		IVariableField ani = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_ANI);
		IVariableField dnis = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_DNIS);
		IVariableField station = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_STATIONEXTENSION);
		IVariableField ucid = mySession.getVariableField(IProjectVariables.CTICALLINFO, IProjectVariables.CTICALLINFO_FIELD_UCID);
		IVariableField nodecode = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_NODECODE);
		
		IVariableField callidField = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_CALLID);
		IVariableField callTypeField = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_CALLTYPE);
		IVariableField vipFlagField = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_VIPFLAG);
		
		IVariableField agentIdField = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_AGENTID);
		logs.debug("uui==="+uui.getStringValue());
		logs.debug("ani==="+ani.getStringValue());
		logs.debug("dnis==="+dnis.getStringValue());
		logs.debug("station==="+station.getStringValue());
		String tempUui =  uui.getStringValue();
		String uuiStr =tempUui.replaceAll(",", "|");
		logs.debug("uuiStr ===> "+uuiStr);
		Map<String,String> map = TextUtil.toMapForUUI(uuiStr);
		logs.debug("当前nodeCode ===> " +  (null!=map?map.get("nodeCode") : ""));
		logs.debug("当前agentId-->" + map.get("agentId")+",AgentID-->"+map.get("AgentID"));
		
		IVariableField gh = mySession.getVariableField(IProjectVariables.CQVALUE, IProjectVariables.CQVALUE_FIELD_GH);
		if(StringUtils.isNotEmpty(map.get("agentId"))){
			gh.setValue(map.get("agentId"));
		}else if(StringUtils.isNotEmpty(map.get("AgentID"))){
			gh.setValue(map.get("AgentID"));
		}
	
		if(null!=map){
			if(StringUtils.isNotEmpty(map.get("nodeCode")) && (StringUtils.isNotEmpty(map.get("agentId")) || StringUtils.isNotEmpty(map.get("AgentID")))){
				nodecode.setValue("9");
			}else if(StringUtils.isNotEmpty(map.get("nodeCode")) && StringUtils.isEmpty(map.get("AgentID"))){
				TransferVO transfervo = new TransferVO();
				nodecode.setValue(map.get("nodeCode"));
				//插入转接log
				transfervo.setCallFlag(nodecode.getStringValue());
				transfervo.setCallId(map.get("callId2"));
				logs.debug("转接callId===="+transfervo.getCallId());
				transfervo.setCallNum(ani.getStringValue());
				transfervo.setCalledNum(dnis.getStringValue());
				callidField.setValue(map.get("callId2"));
				agentIdField.setValue(map.get("AgentID"));
				logs.debug("转接agentId===="+agentIdField.getStringValue());
				try {
					// AppUtil.saveTransferLog(transfervo);
				} catch (Exception e) {
					// e.printStackTrace();
				}
				
			}else if(StringUtils.isNotEmpty(map.get("AgentID"))){
				nodecode.setValue("1");
				agentIdField.setValue(map.get("AgentID"));
				logs.debug("nodecode ===> 1 , AgentID === > " + agentIdField.getStringValue());
			}else{
				//挂机
				//nodecode.setValue("0"); //表示随路数据中callflag没有值 传输不正确
				nodecode.setValue("0");
				String callId = DateUtil.format(new Date(), "yyyyMMddHHmmss")+cticallidField.getStringValue();
				CallLogVO callLogvo = new CallLogVO();
				if(ani.getStringValue().length()==4){
					callLogvo.setCallType("1"); //内部分机
					callLogvo.setCallId("01"+callId);
				}else{
					callLogvo.setCallType("2"); 
					callLogvo.setCallId("02"+callId);
				}
				callLogvo.setCallNum(ani.getStringValue());
				callLogvo.setIvrGroup("1");
				callLogvo.setOrgId("0000");
				callLogvo.setCsrId("IVR");
				
				callidField.setValue(callLogvo.getCallId());
				callTypeField.setValue(callLogvo.getCallType());
				logs.debug("初始化的callid====" + callLogvo.getCallId());
				try {
//					AppUtil.saveCallLog(callLogvo);
//					vipFlagField.setValue(AppUtil.checkVIP(ani.getStringValue()));
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
		}else{
			logs.debug("空");
		}
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("CheckNodeCode", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	
	public static void main(String[] args) {
		String [] arr = "99984".split("");
		for(String s : arr){
			System.out.println(s);
		}
	}
}
